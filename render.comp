#version 310 es

// references:
// https://github.com/oktomus/web-experiments/blob/1e2d3bfbe6/webgl-compute/toy-raytracer/glsl/render.glsl
// http://three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/

precision highp float;
precision highp int;
precision mediump image2DArray;

const int LOCALX = 16;
const int LOCALY = 16;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (rgba8, binding = 0) writeonly uniform highp image2D frameTex;
layout (rgba8, binding = 1) readonly uniform highp image2D accumulatedTex;

#define EPSILON 0.00001
#define MAX_FLOAT 3.402823466e+38
#define M_PI 3.14159265358979323846
#define M_TWO_PI 6.28318530718

const vec3 zero3 = vec3(0.0);
const vec3 one3 = vec3(1.0);
const vec3 oneThird3 = vec3(1.0/3.0);

struct Stats {
  float diff;
  float mainRay;
  float rayCount;
  float rayTest;
  float rayIntersection;
};

layout(std430, binding = 0) buffer Stats_SSBO {
  float diff[LOCALX * LOCALY];
  float mainRay[LOCALX * LOCALY];
  float rayCount[LOCALX * LOCALY];
  float rayTest[LOCALX * LOCALY];
  float rayIntersection[LOCALX * LOCALY];
};

// describe a mesh object
struct Mesh {
  // number of faces
  // face_count == -1: a sphere
  int face_count;
  // the starting index in the vertice array
  int offset;
  // the number of 
  int slab_count;
  // the starting index in the bbox array
  int slab_offset;
  // specular exponent
  float alpha;
  // emit light color
  vec3 color;
  vec3 specular;
  vec3 refraction;
};

layout(std430, binding = 1) readonly buffer Vertices {
  vec3 vertices[];
};

layout(std430, binding = 2) readonly buffer Meshes {
  Mesh meshes[];
};

struct Slab {
  vec3 n;
  float near;
  float far;
  // paddings
};

layout(std430, binding = 3) readonly buffer BoudingBoxes {
  // vec3 normal + float far + float near
  Slab slabs[];
};

struct Light {
  vec3 position;
  float radius;
  vec3 color;
  float intensity;
};

layout(std430, binding = 4) readonly buffer Lights {
  Light lights[];
};


uniform float uSeed;
uniform int uRenderTimes;

uniform mat4 uViewInverse;
uniform mat4 uProjectionInverse;

uniform vec3 uAmbient;

uniform bool uGi;

//
// Pseudo random numbers generator.
//
// References:
// - http://blog.three-eyed-games.com/2018/05/12/gpu-path-tracing-in-unity-part-2/
//
// the random number should be unique for different sensor pixel
float rand(inout float seed, vec2 pixel)
{
    float result = fract(sin(seed / 100.0f * dot(pixel, vec2(12.9898f, 78.233f))) * 43758.5453f);
    seed += 1.0f;
    return result;
}

vec2 rand2(inout float seed, vec2 pixel)
{
    return vec2(rand(seed, pixel), rand(seed, pixel));
}

// Ray
struct Ray {
  vec3 origin;
  vec3 dir;
  vec3 energy;
  float ior;
};

vec3 hit_at(Ray r, float t) {
  return r.origin + r.dir * t;
}

// MÃ¶ller-Trumbore algorithm for triangle interception
// https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/moller-trumbore-ray-triangle-intersection

bool hit_triangle_at(Ray r, vec3 a, vec3 b, vec3 c, out float at) {
  vec3 d = r.dir;
  vec3 ab = b - a;
  vec3 ac = c - a;

  vec3 p = cross(d, ac);

  float denominator = dot(p, ab);

  // The ray direction and the surface normal are perpendicular
  // Allow both side of a triangle be intercepted.
  if (abs(denominator) < EPSILON) return false;

  vec3 t = r.origin - a;

  vec3 q = cross(t, ab);

  float invDenom = 1.0 / denominator;

  float u = dot(p, t) * invDenom;

  if (u < 0.0 || u > 1.0) return false;

  float v = dot(q, d) * invDenom;
  if (v < 0.0 || v + u > 1.0) return false;

  at = dot(q, ac) * invDenom;

  // the interpceted point is behind the camera
  if (at < EPSILON) {
    return false;
  }

  return true;
}

// reference http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/
bool hit_sphere(Ray r, vec3 center, float radius, out float at) {
  vec3 d = r.origin - center;
  float a = dot(r.dir, r.dir);
  float b = 2.0 * dot(r.dir, d);
  float c = dot(d, d) - radius * radius;

  float discriminant = b * b - 4.0 * a * c;
  
  if (discriminant < 0.0) {
    at = 0.0;
    return false;
  } else {
    // we only take the nearest interception point
    // t1 < t2
    float t1 = -sqrt(discriminant);
    float t2 = -t1;
    t1 = (-b + t1) / 2.0 / a;
    t2 = (-b + t2) / 2.0 / a;

    if (t1 > 0.0) {
      at = t1;
    } else if (t2 > 0.0) {
      at = t2;
    } else {
      return false;
    }

    return true;
  }
}

bool hit_bbox(Ray r, Mesh m, out float t, out vec3 normal) {
  float t_min = -10000.0;
  float t_max = MAX_FLOAT;

  for (int i = 0; i < m.slab_count ; i++) {
    Slab s = slabs[i + m.slab_offset];

    float NdotO = dot(s.n, r.origin);
    float NdotR = dot(s.n, r.dir);

    float invNdotR = 1.0 / NdotR;

    float t_near;
    float t_far;

    if (invNdotR >= 0.0) {
      t_near = (s.near - NdotO) * invNdotR;
      t_far = (s.far - NdotO) * invNdotR;
    } else {
      t_near = (s.far - NdotO) * invNdotR;
      t_far = (s.near - NdotO) * invNdotR;
    }

    if (t_near > t_min) {
      t_min = t_near;
      normal = s.n;
    }
    if (t_far < t_max) {
      t_max = t_far;
    }

    if (t_min > t_max || t_max < EPSILON) return false;
  }

  if (t_min < EPSILON) {
    t = t_max;
  } else {
    t = t_min;
  }

  return true;
}

// get a random point on an unit sphere
// reference: http://corysimon.github.io/articles/uniformdistn-on-sphere/
vec3 sample_sphere_uniform(inout float seed, vec2 pixel) {
  vec2 s = rand2(seed, pixel);
  
  float theta = M_TWO_PI * s.x;
  float cos_phi = 1.0 - 2.0 * s.y;
  float sin_phi = sqrt(1.0 - cos_phi * cos_phi);

  return vec3(
      cos(theta) * sin_phi,
      cos_phi,
      sin(theta) * sin_phi);
}

mat3 get_tengent_space(vec3 normal) {
  // Choose a helper vector for the cross product
  vec3 helper = vec3(1, 0, 0);
  if (abs(normal.x) > 0.99) {
    helper = vec3(0, 0, 1);
  }

  // Generate vectors
  vec3 tangent = normalize(cross(normal, helper));
  vec3 binormal = normalize(cross(normal, tangent));

  return mat3(tangent, binormal, normal);
}

vec3 sample_hemisphere_uniform(vec3 normal, float alpha, inout float seed, vec2 pixel) {
  vec2 r = rand2(seed, pixel);
  float sin_theta = 1.0 - pow(1.0 - r.x, 2.0 / (1.0 + alpha));
  float cos_theta = sqrt(1.0 - sin_theta);
  sin_theta = sqrt(sin_theta);

  float phi = r.y * M_TWO_PI;

  vec3 dir = vec3(
    sin_theta * cos(phi),
    sin_theta * sin(phi),
    cos_theta
  );

  return normalize(get_tengent_space(normal) * dir);
}

// use berymetric coordinate to get a random point on a mesh
vec3 random_point_on_mesh(Mesh m, inout float seed, vec2 pixel) {
  if (m.face_count == -1) {
    vec3 center = vertices[m.offset];
    vec3 normal = vertices[m.offset + 1];

    return center + length(normal) * sample_sphere_uniform(seed, pixel);
  }

  // pick a random face 
  int face_index = min(int(rand(seed, pixel) * float(m.face_count)), m.face_count - 1);
  int index = face_index + m.offset;
  
  vec3 a = vertices[index + 0];
  vec3 b = vertices[index + 1];
  vec3 c = vertices[index + 2];

  float u = rand(seed, pixel);
  float v = rand(seed, pixel);

  if (u + v > 1.0) {
    u = 1.0 - u;
    v = 1.0 - v;
  }

  float t = 1.0 - u - v;

  return a * t + b * u + c * v;
}

bool hit_mesh(Ray r, float at_min, float at_max, inout float at, out int index, out vec3 normal, inout Stats stats) {
  index = -1;
  at = at_max;
  bool hit = false;

  for (int i = 0; i < meshes.length(); ++i) {
    Mesh mesh = meshes[i];
    int offset = mesh.offset;
    float t;
    vec3 n;

    if (mesh.face_count == -1) {
      vec3 a = vertices[offset];
      vec3 b = vertices[offset + 1];

      if (hit_sphere(r, a, length(b), t) && t >= at_min && t < at_max && t < at) {
        stats.rayIntersection += 1.0;
        hit = true; 
        at = t;
        index = i;
        normal = normalize(hit_at(r, t) - a);
      }
      stats.rayTest += 1.0;
    } else if (hit_bbox(r, mesh, t, n) && t >= at_min && t < at_max && t < at) {
      // hit = true; 
      // at = t;
      // index = i;
      // normal = normalize(n);
      // if (dot(normal, r.dir) > 0.0) {
      //   normal = -normal;
      // }

      stats.rayIntersection += 1.0;

      for (int j = 0; j < mesh.face_count; ++j) {
        vec3 a = vertices[j * 3 + offset];
        vec3 b = vertices[j * 3 + offset + 1];
        vec3 c = vertices[j * 3 + offset + 2];

        if (hit_triangle_at(r, a, b, c, t) && t >= at_min && t < at_max && t < at) {
          stats.rayIntersection += 1.0;
          hit = true; 
          at = t;
          index = i;
          normal = normalize(cross(b - a, c - a));
        }
      }

      stats.rayTest += float(mesh.face_count);
    }
  }

  return hit;
}

vec3 reflect_dir(vec3 normal, vec3 dir) {
  return normalize(2.0 * dot(normal, -dir) * normal + dir);
}

vec3 refract_dir(vec3 normal, vec3 dir, float ior) {
  float c1 = dot(normal, dir);
  float c2 = sqrt(1.0 - ior * ior * (1.0 - c1 * c1));

  return ior * dir + (ior * c1 - c2) * normal;
}

const int max_depth = 10;
// get the color of a ray
vec3 get_color(Ray r, inout float seed, vec2 pixel, inout Stats stats) {
  int depth = 1;
  float at;
  int mesh_index;
  vec3 normal;
  vec3 ret = zero3;
  vec3 direct = zero3;
  vec3 indirect = zero3;

  int effective_max_depth;
  if (uGi) {
    effective_max_depth = max_depth;
  } else {
    effective_max_depth = 3;
  }

  while (depth < effective_max_depth && length(r.energy) > EPSILON) {
    if (hit_mesh(r, 0.01, MAX_FLOAT, at, mesh_index, normal, stats)) {

      Mesh mesh = meshes[mesh_index];
      vec3 surface_normal = normal;
      vec3 hit_point = hit_at(r, at);
      // the ray direction and normal are at the same side
      bool same_side = dot(surface_normal, r.dir) < 0.0;

      // compute indirect lighting

      // the ray hit a light source, ignore it because it is calculated in the direct lighting

      // if (mesh.emission != zero3) {
      // // a light source only emit light on the normal direction
      //   if (same_side) {
      //   ret += r.energy * mesh.emission * mesh.intensity;
      //   } else {
      //     ret += zero3;
      //   }

      //   // r.energy = zero3;

      //   if (depth == 1) {
      //     depth -= 1;
      //   }
      // }

      float diffuse_factor = dot(mesh.color, oneThird3);
      float specular_factor = dot(mesh.specular, oneThird3);

      // no diffuse and reflection inside an object
      if (!same_side) {
        diffuse_factor = 0.0;
        specular_factor = 0.0;
      }

      float refraction_factor = dot(mesh.refraction, oneThird3);
      float sum = diffuse_factor + specular_factor + refraction_factor;

      if (sum <= EPSILON) {
        // no refraction, no diffuse and no reflection.
        // stop the light bounce
        r.energy = zero3;
      } else {
        diffuse_factor /= sum;
        specular_factor /= sum;
        refraction_factor /= sum;

        float chance = rand(seed, pixel);

        if (chance < specular_factor) {
          // reflective
          r.origin = hit_point + EPSILON * surface_normal;
          r.dir = sample_hemisphere_uniform(reflect_dir(surface_normal, r.dir), mesh.alpha, seed, pixel);
          float f = (mesh.alpha + 2.0) / (mesh.alpha + 1.0);
          r.energy *= (1.0 / specular_factor) * mesh.specular * max(0.0, dot(surface_normal, r.dir) * f);
        } else if (chance < specular_factor + diffuse_factor) {
          // diffuse
          r.origin = hit_point + EPSILON * surface_normal;
          r.dir = sample_hemisphere_uniform(surface_normal, 1.0, seed, pixel);
          r.energy *= (1.0 / diffuse_factor) * mesh.color;
        } else {
          float k;
          // Add different ior
          float mesh_ior = 1.5;
          // light direction is the same as the normal, exiting the object
          if (!same_side) {
            k = r.ior / 1.0;
            r.ior = 1.0;
            surface_normal = -surface_normal;
          } else {
            k = r.ior / mesh_ior;
            r.ior = mesh_ior;
          }

          // refraction
          r.origin = hit_point - EPSILON * surface_normal;
          r.dir = refract_dir(surface_normal, r.dir, k);
          r.energy *= (1.0 / refraction_factor) * mesh.refraction;
        }
      }

      // direct lighting
      for (int i = 0; i < lights.length(); i++) {
        Light l = lights[i];
        Ray sr;
        sr.origin = hit_point + surface_normal * EPSILON;
        vec3 random_point = l.position + sample_hemisphere_uniform(normalize(hit_point - l.position), 1.0, seed, pixel) * l.radius;

        vec3 dd = random_point - hit_point;
        sr.dir = normalize(dd);
        float d = dot(dd, dd);

        if (!hit_mesh(sr, 0.01, sqrt(d), at, mesh_index, normal, stats)) {
          direct += r.energy * l.color * l.intensity / d * M_TWO_PI;
        }
      }

      depth ++;

    } else {
      // hit nothing, we give an ambient light
      indirect += r.energy * uAmbient;
      r.energy = zero3;
    }
  }

  float f_depth = float(depth);

  stats.rayCount += f_depth;

  // FIXME: verify the reason we need to multiply 2.0 here.
  // according to the furnance test, we got half the brightness if we don't multiply 2.0
  // but what is wrong?
  return (indirect * 2.0 + direct) / f_depth;
}

Ray create_camera_ray(vec2 uv) {
  vec3 origin = (uViewInverse * vec4(0, 0, 0, 1)).xyz;
  vec3 dir = (uProjectionInverse * vec4(uv, 0, 1)).xyz;
  dir = (uViewInverse * vec4(dir, 0)).xyz;
  dir = normalize(dir);

  Ray r;
  r.origin = origin;
  r.dir = dir;
  r.energy = vec3(1.0);
  // Index of refraction of air.
  // reference https://pixelandpoly.com/ior.html
  r.ior = 1.0;
  return r;
}

void main() {
  // https://www.khronos.org/opengl/wiki/Compute_Shader/Defined_Inputs
  // gl_GlobalInvocationId = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;

  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  ivec2 imageSize = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  vec2 uv = vec2(storePos) / vec2(imageSize);
  float seed = uSeed;

  vec2 sample_pos = (vec2(storePos) + rand2(seed, uv)) / vec2(imageSize);

  Ray r = create_camera_ray(sample_pos);

  uint id = gl_LocalInvocationIndex;

  Stats stat;
  stat.mainRay = 1.0;

  vec3 color = get_color(r, seed, uv, stat);

  if (uRenderTimes != 0) {
    vec3 initColor = imageLoad(accumulatedTex, storePos).rgb;
    vec3 d = (color - initColor) / float(uRenderTimes);

    // output the frame difference
    stat.diff += dot(d, d);

    color = initColor + d;
  } else {
    stat.diff += 1.0;
  }

  diff[id] += stat.diff;
  mainRay[id] += stat.mainRay;
  rayCount[id] += stat.rayCount;
  rayTest[id] += stat.rayTest;
  rayIntersection[id] += stat.rayIntersection;

  imageStore(frameTex, storePos, vec4(color, 1.0));
}
